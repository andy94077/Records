set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'skielbasa/vim-material-monokai'
Plugin 'Valloric/vim-operator-highlight'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" Setting some decent VIM settings for programming
""highlight Pmenu ctermfg=White ctermbg=Magenta

let g:ycm_global_ycm_extra_conf = "$HOME/.ycm_extra_conf.py"
let g:ycm_confirm_extra_conf = 1
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
let g:ycm_filetype_whitelist = {"c":1, "cpp":1, "py":1, "vimrc":1, "bashrc":1, "sh":1}

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1

let g:ophigh_color_gui ="#fc3488"

set t_Co=256
set termguicolors
set tabstop=4
set smartindent
set shiftwidth=4
set number relativenumber
colorscheme material-monokai
set hlsearch

"za: fold/unfold lines, zM: fold all, zR: unfold all
set foldenable
set foldmethod=syntax
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap ' ''<Left>
inoremap " ""<Left>
inoremap ;; <End>;<LF>

let e = expand("%:e")
if e == "c" || e == "cpp"
	inoremap # #include <><LEFT>
endif

"map <F5> <ESC>:w<CR>:!gcc -o %< -g -Wall -std=c99 %<CR>:!./%<<CR>
"----------------------------my settings are above this line---------------------------------------
" If no screen, use color term
if ($TERM == "vt100")
  " xterm-color / screen
  set t_Co=8
  set t_AF=[1;3%p1%dm
  set t_AB=[4%p1%dm
endif

if filereadable($VIMRUNTIME . "/vimrc_example.vim")
 so $VIMRUNTIME/vimrc_example.vim
endif

if filereadable($VIMRUNTIME . "/macros/matchit.vim")
 so $VIMRUNTIME/macros/matchit.vim
endif

syntax on

set nocompatible
set wildmenu
set backupdir=~/tmp,.,/var/tmp/vi.recover,/tmp
set directory=~/tmp,/var/tmp/vi.recover,/tmp,.
set backup		" keep a backup file
" set textwidth=78
" set shiftwidth=4
set bs=2		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
set showmatch

"set background=dark	" another is 'light'

" VIM 6.0,
if version >= 600
    set nohlsearch
    set foldmethod=marker
    set foldlevel=1
    set fileencodings=ucs-bom,utf-8,sjis,big5,latin1
else
    set fileencoding=taiwan
endif

" Tab key binding
if version >= 700
  map  <C-c> :tabnew<CR>
  imap <C-c> <ESC>:tabnew<CR>
  map  <C-k> :tabclose<CR>
  map  <C-p> :tabprev<CR>
  imap <C-p> <ESC>:tabprev<CR>
  map  <C-n> :tabnext<CR>
  "imap <C-n> <ESC>:tabnext<CR>
  map <F4> :set invcursorline<CR>

  map g1 :tabn 1<CR>
  map g2 :tabn 2<CR>
  map g3 :tabn 3<CR>
  map g4 :tabn 4<CR>
  map g5 :tabn 5<CR>
  map g6 :tabn 6<CR>
  map g7 :tabn 7<CR>
  map g8 :tabn 8<CR>
  map g9 :tabn 9<CR>
  map g0 :tabn 10<CR>
  map gc :tabnew<CR>
  map gn :tabn<CR>
  map gp :tabp<CR>

  highlight TabLineSel term=bold,underline cterm=bold,underline ctermfg=7 ctermbg=0
  highlight TabLine    term=bold cterm=bold
  highlight clear TabLineFill


end

" Crontabs must be edited in place
au BufRead /tmp/crontab* :set backupcopy=yes

inoremap <F7> <Esc>:w<CR>:!make<CR>
nnoremap <F7> <Esc>:w<CR>:!make<CR>
inoremap <F6> <Esc>:w<CR>:!make %<<CR>
nnoremap <F6> <Esc>:w<CR>:!make %<<CR>
command! COMPILE call s:COMPILE()
nnoremap <F5> <ESC>:w<CR>:COMPILE<CR>
inoremap <F5> <ESC>:w<CR>:COMPILE<CR>
function! s:COMPILE()
	let e = expand("%:e")
	if e == "c"
		:call s:Gcc()
	endif
	if e == "py"
		:call s:Python()
	endif
	if e == "cpp"
		:call s:Cpp()
	endif
	if e == "sh"
		:call s:Shell()
	endif
endfunction

function! s:Python()
	:!python3 %
endfunction

function! s:Gcc()
	:!gcc % -o %< -g -Wall -Wextra && ./%<
endfunction

function! s:Cpp()
	:!g++ % -o %< -g -Wall -Wextra -std=c++17 && ./%<
endfunction

function! s:Shell()
	:!bash %
endfunction

set mouse=
hi Normal guibg=#1b1b1b
hi Comment guifg=#20c100
highlight Pmenusel guifg=#00a2e8 guibg=#eeeeee
